#!/usr/bin/env bash
set -eEuo pipefail

script=$(basename $0)
usage() {
    echo "Usage:
      $script action --parameters
      $script pull            [--policy-list policies.txt] [--image-list images.txt] [--policies policies.tar.gz] [--images images.tar]
      $script push --registry [--policy-list policies.txt] [--image-list images.txt] [--policies policies.tar.gz] [--images images.tar] [--kwctl-sources sources.yaml]
      $script setup combines pull & push actions, all above arguments apply
      
      --registry              Private target registry in the registry:port format. Required on push.
      --policy-list path      Text file with list of policies to pull or push.
                              If not set then list is detected from archive (push) or released kubewarden-defaults chart (pull)
                              If you want to use any additional policies add them to this list.
      --image-list path       Same as policies, but applies to kubewarden images
      --policies path         Archive generated by kwctl save during pull. Default is kubewarden-policies.tar.gz.
      --images path           Archive generated by docker save during pull. Default is kubewarden-images.tar.
      --kwctl-sources path    Argument is passed to kwctl push --sources-path <argument>. Used on push only.
      
      If you specify policy lists for push command by hand please make sure they are also in corresponding archives (or pull again).

      Requirements: jq, kwctl, helm, docker

      Examples:
        Pull images and policies and save them to archives in current directory
        - $script pull --policy-list policies.txt
        
        Push images and policies from created archives to local registry
        - $script push --policy-list policies.txt --policies policies.tar.gz

        Setup registry with default images and all policies from policies.tar.gz archive
        - $script setup --policies policies.tar.gz --registry localhost:5000 --kwctl-sources sources.yaml
      " 1>&2
}


while [[ $# -gt 0 ]]; do
   case $1 in
   push|pull|setup)
      action="$1"
      shift;;
   -r|--registry)
      REGISTRY="$2"
      shift 2;;
   -i|--images)
      IMAGES_TAR="$2"
      shift 2;;
   -p|--policies)
      POLICIES_TAR="$2"
      shift 2;;
   --image-list)
      IMAGES_TXT="$2"
      shift 2;;
   --policy-list)
      POLICIES_TXT="$2"
      shift 2;;
   -s|--kwctl-sources)
      KWCTL_SOURCES="$2"
      shift 2;;
   -h|--help)
      usage
      exit 0;;
   *)
      usage
      exit 1;;
   esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

trap 'echo "Error on ${BASH_SOURCE}:${LINENO} $(sed -n "${LINENO} s/^\s*//p" ${BASH_SOURCE})"' ERR

# ==================================================================================================
# Check parameters, requirements and set defaults

# TODO - delme
: ${KWCTL_SOURCES:=sources.yaml}
: ${REGISTRY:=localhost:5000}

# Check parameters & Requirement
[[ "${action:-}" =~ ^(pull|push|setup)$ ]] || { echo "Action not recognized: ${action:--}"; exit 1; }
[[ "$action" =~ ^(push|setup)$ ]] && : ${REGISTRY:?Required parameter is missing: --registry}
[ -v REGISTRY ] && curl --output /dev/null --silent --head --fail "$REGISTRY" # check registry is online

[ -v IMAGES_TXT ] && test -f "$IMAGES_TXT"
[ -v POLICIES_TXT ] && test -f "$POLICIES_TXT"
[ -v KWCTL_SOURCES ] && test -f "$KWCTL_SOURCES"
if [ "$action" == "push" ]; then
   [ -v IMAGES_TAR ] && test -f "$IMAGES_TAR"
   [ -v POLICIES_TAR ] && test -f "$POLICIES_TAR"
fi
which jq kwctl helm docker > /dev/null || { echo "Missing one of requirements"; exit 1; }

# Set defaults
: ${IMAGES_TAR:=kubewarden-images.tar}
: ${POLICIES_TAR:=kubewarden-policies.tar.gz}

kwctl_args=${KWCTL_SOURCES:+--sources-path $KWCTL_SOURCES}
tmpfile=$(mktemp /tmp/kubewarden-airgap.XXXXXX)

# ==================================================================================================
# Functions

# Print green colored message
function step() { printf -- "\e[32m${*}\e[0m\n"; }

# Get latest policiy and image lists from artifacthub
# Use text files from kubewarden-defaults chart
function pull_latest_lists() {
   tag=$(helm search hub kubewarden-defaults -o json | jq -er '.[] | select(.repository.url=="https://charts.kubewarden.io").version')
   assets_urls=$(curl -sL https://api.github.com/repos/kubewarden/helm-charts/releases/tags/kubewarden-defaults-$tag | jq -er '.assets[].browser_download_url')
   imagelist_url=$(grep 'images.txt$' <<< "$assets_urls")
   policylist_url=$(grep 'policylist.txt$' <<< "$assets_urls")
}

# Download images & policies
# If no $source is set use defaults from pull_latest_lists
function pull() {
   local source="$1"    # file or url with list of images or policies
   local target="$2"    # target archive filename
   local command        # docker for images or kwctl for policies

   [ -f "$target" ] && { echo "File $target already exists, skipping pull."; return; }

   # if source is url download it
   if [[ "$source" =~ ^https:// ]]; then
      curl -sL $source -o "$tmpfile"
      source=$tmpfile
   fi

   grep -qF '://' $source && command=kwctl || command=docker
   cat $source | while read line || [[ -n $line ]]; do
      echo "Pull: $line"
      $command pull "$line" > /dev/null
   done
   echo "Create $target from pulled images"
   $command save $(cat $source) --output "$target"
}

# Upload images & policies into $REGISTRY
# If no $source is set generate lists from archive content
function push() {
   local source="$1"     # source list
   local archive="$2"   # source archive filename
   local command        # docker or kwctl

   [ ! -f "$archive" ] && { echo "File $archive does not exist, skipping push."; return; }
   tar -tf $archive | grep manifest.json >/dev/null && command='docker' || command='kwctl'

   if [ -z "$source" ]; then
      [ $command == 'docker' ] && tar -xOf $archive manifest.json | jq -re '.[].RepoTags[]' > "$tmpfile"
      [ $command == 'kwctl' ] && tar -tf $archive | sed 's#/#://#' > "$tmpfile"
      source=$tmpfile
   fi

   echo "Loading images from $archive"
   $command load --input "$archive"
   cat $source | while read image || [[ -n $image ]]; do
      echo -n "Push: "
      if [ $command == 'docker' ]; then
         local target=$REGISTRY/${image#*/}
         docker tag $image $target
         docker push -q $target
      elif [ $command == 'kwctl' ]; then
         local target=$(sed -E "s#.*://[^/]+#registry://$REGISTRY#" <<< "$image")
         echo "$target"
         kwctl push $image $target ${kwctl_args:-} >/dev/null
      fi
   done
}

# ==================================================================================================
# Main

if [[ "$action" =~ pull|setup ]]; then
   [ -v IMAGES_TXT -a -v POLICIES_TXT ] || pull_latest_lists
   
   step "Pulling images to $IMAGES_TAR"
   pull "${IMAGES_TXT:-$imagelist_url}" "$IMAGES_TAR"

   step "Pulling policies to $POLICIES_TAR"
   pull "${POLICIES_TXT:-$policylist_url}" "$POLICIES_TAR"
fi

if [[ "$action" =~ push|setup ]]; then
   step "Pushing images from $IMAGES_TAR to $REGISTRY"
   push "${IMAGES_TXT:-}" "$IMAGES_TAR"

   step "Pushing policies from $POLICIES_TAR to $REGISTRY"
   push "${POLICIES_TXT:-}" "$POLICIES_TAR"
fi

rm "$tmpfile"

exit 0